import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import {getLocalWeatherUrlAsync} from "./weatherAPI";

const initialState = {
  status: 'loading',
  weatherData: {},
};

export const getLocalWeather = createAsyncThunk(
  'weather/getLocalWeather',
  async (params) => {
    const response = await getLocalWeatherUrlAsync(params.geolocation, params.language, params.unit);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const localWeatherSlice = createSlice({
  name: 'localWeather',
  initialState,
  reducers: {
    
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getLocalWeather.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(getLocalWeather.fulfilled, (state, action) => {
        state.status = 'idle';
        state.weatherData = action.payload;
      })
      .addCase(getLocalWeather.rejected, (state) => {
        state.status = 'rejected';
      })
  },
});

export const localWeatherFromState = (state) => state.localWeather.weatherData;
export const localWeatherStatus = (state) => state.localWeather.status;

export default localWeatherSlice.reducer;
